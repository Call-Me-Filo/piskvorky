/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/FiveInARow.ts":
/*!***************************!*\
  !*** ./src/FiveInARow.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _models_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/EventEmitter */ \"./src/models/EventEmitter.ts\");\n/* harmony import */ var _models_Playground__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/Playground */ \"./src/models/Playground.ts\");\n/* harmony import */ var _bot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bot */ \"./src/bot.ts\");\n\r\n\r\n\r\nvar ACTIVE_CLASS = 'active-player';\r\nvar Difficulty;\r\n(function (Difficulty) {\r\n    Difficulty[\"EASY\"] = \"easy\";\r\n    Difficulty[\"MEDIUM\"] = \"medium\";\r\n})(Difficulty || (Difficulty = {}));\r\nvar Mode;\r\n(function (Mode) {\r\n    Mode[\"SINGLEPLAYER\"] = \"singleplayer\";\r\n    Mode[\"MULTIPLAYER\"] = \"multiplayer\";\r\n})(Mode || (Mode = {}));\r\nvar Colour;\r\n(function (Colour) {\r\n    Colour[\"COLOUR1\"] = \"colour1\";\r\n    Colour[\"COLOUR2\"] = \"colour2\";\r\n    Colour[\"COLOUR3\"] = \"colour3\";\r\n})(Colour || (Colour = {}));\r\nvar FiveInARow = /** @class */ (function () {\r\n    function FiveInARow() {\r\n        var _this = this;\r\n        // Document object model variables (DOM variables)\r\n        this.playground = document.getElementById('playground');\r\n        this.startButton = document.getElementById('startButton');\r\n        this.difficulty = document.getElementById('difficulty');\r\n        this.difficultyDropdown = document.getElementById('difficultyDropdown');\r\n        this.mode = document.getElementById('mode');\r\n        this.modeDropdown = document.getElementById('modeDropdown');\r\n        this.colour = document.getElementById('colour');\r\n        this.colourDropdown = document.getElementById('colourDropdown');\r\n        this.score1 = document.getElementById('score1');\r\n        this.score2 = document.getElementById('score2');\r\n        this.player1 = document.getElementById('player1');\r\n        this.player2 = document.getElementById('player2');\r\n        this.reset = document.getElementById('reset');\r\n        this.easy = document.getElementById(\"easy\");\r\n        this.medium = document.getElementById(\"medium\");\r\n        this.singleplayer = document.getElementById(\"singleplayer\");\r\n        this.multiplayer = document.getElementById(\"multiplayer\");\r\n        this.circle = document.getElementById(\"circle\");\r\n        this.cross = document.getElementById(\"cross\");\r\n        this.colour1 = document.getElementById(\"colour1\");\r\n        this.colour2 = document.getElementById(\"colour2\");\r\n        this.colour3 = document.getElementById(\"colour3\");\r\n        /**\r\n         * List of opened dropdowns.\r\n         */\r\n        this.dropdownsOpened = [];\r\n        FiveInARow.eventEmitter.on('playgroundChange', function (playground) { return _this.handlePlaygroundChanged(playground); });\r\n        FiveInARow.eventEmitter.on('win', function (player) { return _this.handleWin(player); });\r\n        FiveInARow.eventEmitter.on('switchPlayers', function (player) { return _this.handleSwitchPlayer(player); });\r\n        this.playgroundInstance = new _models_Playground__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        this.playground.append(this.startButton);\r\n    }\r\n    Object.defineProperty(FiveInARow, \"eventEmitter\", {\r\n        get: function () {\r\n            return this._eventEmitter;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FiveInARow, \"bot\", {\r\n        get: function () {\r\n            switch (this.selectedDifficulty) {\r\n                case Difficulty.EASY:\r\n                    return this._botEasy;\r\n                case Difficulty.MEDIUM:\r\n                    return this._botMedium;\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FiveInARow, \"mode\", {\r\n        get: function () {\r\n            return this.selectedMode;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    FiveInARow.main = function () {\r\n        var fiveInARow = new FiveInARow();\r\n        // Button clicks.\r\n        fiveInARow.startButton.addEventListener('click', function (e) { return fiveInARow.handleStartButtonClick(e); });\r\n        fiveInARow.difficulty.addEventListener('click', function (e) { return fiveInARow.handleDifficultyButtonClick(e); });\r\n        fiveInARow.mode.addEventListener('click', function (e) { return fiveInARow.handleModeButtonClick(e); });\r\n        fiveInARow.colour.addEventListener('click', function (e) { return fiveInARow.handleColourButtonClick(e); });\r\n        fiveInARow.reset.addEventListener('click', function (e) { return fiveInARow.handleResetButtonClick(e); });\r\n        fiveInARow.easy.addEventListener(\"click\", function (e) { return fiveInARow.handleDifficultyChange(Difficulty.EASY); });\r\n        fiveInARow.medium.addEventListener(\"click\", function (e) { return fiveInARow.handleDifficultyChange(Difficulty.MEDIUM); });\r\n        fiveInARow.singleplayer.addEventListener(\"click\", function (e) { return fiveInARow.handleModeChange(Mode.SINGLEPLAYER); });\r\n        fiveInARow.multiplayer.addEventListener(\"click\", function (e) { return fiveInARow.handleModeChange(Mode.MULTIPLAYER); });\r\n        fiveInARow.colour1.addEventListener(\"click\", function (e) { return fiveInARow.handleColourChange(Colour.COLOUR1); });\r\n        fiveInARow.colour2.addEventListener(\"click\", function (e) { return fiveInARow.handleColourChange(Colour.COLOUR2); });\r\n        fiveInARow.colour3.addEventListener(\"click\", function (e) { return fiveInARow.handleColourChange(Colour.COLOUR3); });\r\n        // Global click\r\n        document.addEventListener('click', function (e) { return fiveInARow.handleGlobalClick(e); });\r\n    };\r\n    /**\r\n     * Handles playground change.\r\n     * @param playground New playground HTML.\r\n     */\r\n    FiveInARow.prototype.handlePlaygroundChanged = function (playground) {\r\n        this.playground.innerHTML = '';\r\n        var length = playground.children.length;\r\n        for (var i = 0; i < length; i++) {\r\n            this.playground.append(playground.children[0]);\r\n        }\r\n    };\r\n    /**\r\n     * Handles actions when someone has won.\r\n     * @param player Player who won.\r\n     */\r\n    FiveInARow.prototype.handleWin = function (player) {\r\n        if (player === _models_Playground__WEBPACK_IMPORTED_MODULE_1__.FieldValue.CIRCLE) {\r\n            var score = parseInt(this.score1.innerText);\r\n            this.score1.innerText = (score + 1).toString();\r\n        }\r\n        else {\r\n            var score = parseInt(this.score2.innerText);\r\n            this.score2.innerText = (score + 1).toString();\r\n        }\r\n        var winButton = this.createWinButton(player);\r\n        this.playground.append(winButton);\r\n        this.playgroundInstance.running = false;\r\n        winButton.click();\r\n    };\r\n    /**\r\n     * Switches players.\r\n     * @param player Player who is playing.\r\n     */\r\n    FiveInARow.prototype.handleSwitchPlayer = function (player) {\r\n        if (player === _models_Playground__WEBPACK_IMPORTED_MODULE_1__.FieldValue.CROSS) {\r\n            this.player2.classList.remove(ACTIVE_CLASS);\r\n            this.player1.classList.add(ACTIVE_CLASS);\r\n        }\r\n        else {\r\n            this.player1.classList.remove(ACTIVE_CLASS);\r\n            this.player2.classList.add(ACTIVE_CLASS);\r\n        }\r\n    };\r\n    /**\r\n     * Handles start button click.\r\n     * @param event Click event.\r\n     */\r\n    FiveInARow.prototype.handleStartButtonClick = function (event) {\r\n        this.playground.removeChild(this.startButton);\r\n        this.playgroundInstance.running = true;\r\n    };\r\n    /**\r\n     * Handles difficulty button click.\r\n     * @param event Click event.\r\n     */\r\n    FiveInARow.prototype.handleDifficultyButtonClick = function (event) {\r\n        this.openDropdown(event.target, 'difficultyDropdown');\r\n    };\r\n    /**\r\n     * Handles mode button click.\r\n     * @param event Click event.\r\n     */\r\n    FiveInARow.prototype.handleModeButtonClick = function (event) {\r\n        this.openDropdown(event.target, 'modeDropdown');\r\n    };\r\n    /**\r\n     * Handles colour button click.\r\n     * @param event Click event.\r\n     */\r\n    FiveInARow.prototype.handleColourButtonClick = function (event) {\r\n        this.openDropdown(event.target, 'colourDropdown');\r\n    };\r\n    /**\r\n     * Handles reset button click.\r\n     * @param event Click event.\r\n     */\r\n    FiveInARow.prototype.handleResetButtonClick = function (event) {\r\n        this.playgroundInstance = new _models_Playground__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        this.player2.classList.remove(ACTIVE_CLASS);\r\n        this.player1.classList.add(ACTIVE_CLASS);\r\n        this.score1.innerText = (0).toString();\r\n        this.score2.innerText = (0).toString();\r\n        this.playgroundInstance.running = true;\r\n    };\r\n    FiveInARow.prototype.handleDifficultyChange = function (difficulty) {\r\n        FiveInARow.selectedDifficulty = difficulty;\r\n    };\r\n    FiveInARow.prototype.handleModeChange = function (mode) {\r\n        FiveInARow.selectedMode = mode;\r\n    };\r\n    /**\r\n     * Handles Colour change.\r\n     * @param colour New Colour.\r\n     */\r\n    FiveInARow.prototype.handleColourChange = function (colour) {\r\n        switch (colour) {\r\n            case Colour.COLOUR1:\r\n                this.circle.style.fill = \"tomato\";\r\n                this.cross.style.fill = \"#222222\";\r\n                break;\r\n            case Colour.COLOUR2:\r\n                this.circle.style.fill = \"purple\";\r\n                this.cross.style.fill = \"pink\";\r\n                break;\r\n            case Colour.COLOUR3:\r\n                this.circle.style.fill = \"green\";\r\n                this.cross.style.fill = \"blue\";\r\n                break;\r\n        }\r\n        this.playgroundInstance.regenerate();\r\n    };\r\n    /**\r\n     * Handles global click.\r\n     * @param event Click event.\r\n     * @private\r\n     */\r\n    FiveInARow.prototype.handleGlobalClick = function (event) {\r\n        for (var _i = 0, _a = this.dropdownsOpened; _i < _a.length; _i++) {\r\n            var id = _a[_i];\r\n            var dropdown = document.getElementById(id);\r\n            dropdown.style.display = 'none';\r\n            this.dropdownsOpened.splice(this.dropdownsOpened.indexOf(id));\r\n            clearTimeout(this.openTimeout);\r\n        }\r\n    };\r\n    /**\r\n     * Creates win button.\r\n     * @param player Player who won.\r\n     */\r\n    FiveInARow.prototype.createWinButton = function (player) {\r\n        var _this = this;\r\n        var winButton = document.createElement('div');\r\n        winButton.classList.add('win-button');\r\n        winButton.innerText = 'Vyhrál hráč ' + player;\r\n        winButton.addEventListener('click', function () {\r\n            _this.playgroundInstance.reset();\r\n        });\r\n        return winButton;\r\n    };\r\n    /**\r\n     * Opens specified dropdown.\r\n     *\r\n     * @param target Event target.\r\n     * @param dropdown Dropdown to be opened.\r\n     * @private\r\n     */\r\n    FiveInARow.prototype.openDropdown = function (target, dropdown) {\r\n        var _this = this;\r\n        this.openTimeout = window.setTimeout(function () {\r\n            if (_this.dropdownsOpened.some(function (id) { return _this[dropdown].id === id; }) && target.classList.contains('dropdown-item')) {\r\n                _this[dropdown].style.display = 'none';\r\n                _this.dropdownsOpened.splice(_this.dropdownsOpened.indexOf(_this[dropdown].id));\r\n            }\r\n            else {\r\n                _this[dropdown].style.display = 'block';\r\n                _this.dropdownsOpened.push(_this[dropdown].id);\r\n            }\r\n        });\r\n    };\r\n    FiveInARow._eventEmitter = new _models_EventEmitter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    FiveInARow._botEasy = new _bot__WEBPACK_IMPORTED_MODULE_2__.Bot(_models_Playground__WEBPACK_IMPORTED_MODULE_1__.FieldValue.CIRCLE, _bot__WEBPACK_IMPORTED_MODULE_2__.Behaviour.DEFENSIVE);\r\n    FiveInARow._botMedium = new _bot__WEBPACK_IMPORTED_MODULE_2__.Bot(_models_Playground__WEBPACK_IMPORTED_MODULE_1__.FieldValue.CIRCLE, _bot__WEBPACK_IMPORTED_MODULE_2__.Behaviour.COMBINED);\r\n    FiveInARow.selectedDifficulty = Difficulty.EASY;\r\n    FiveInARow.selectedMode = Mode.SINGLEPLAYER;\r\n    return FiveInARow;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FiveInARow);\r\n\n\n//# sourceURL=webpack://piskvorky/./src/FiveInARow.ts?");

/***/ }),

/***/ "./src/bot.ts":
/*!********************!*\
  !*** ./src/bot.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Behaviour\": () => (/* binding */ Behaviour),\n/* harmony export */   \"Bot\": () => (/* binding */ Bot)\n/* harmony export */ });\n/* harmony import */ var _models_Playground__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/Playground */ \"./src/models/Playground.ts\");\n/* harmony import */ var _utils_MathUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/MathUtils */ \"./src/utils/MathUtils.ts\");\n\r\n\r\nvar Behaviour;\r\n(function (Behaviour) {\r\n    Behaviour[\"OFFENSIVE\"] = \"offensive\";\r\n    Behaviour[\"DEFENSIVE\"] = \"defensive\";\r\n    Behaviour[\"COMBINED\"] = \"combined\";\r\n})(Behaviour || (Behaviour = {}));\r\n//0.05\r\nvar Bot = /** @class */ (function () {\r\n    function Bot(character, behaviour) {\r\n        /**\r\n         * Risk / Reward increase value\r\n         */\r\n        this.INCREASE = 0.05;\r\n        this.CHARACTER = character;\r\n        this.ENEMY_CHARACTER = character === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE ? _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS : _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE;\r\n        this.BEHAVIOUR = behaviour;\r\n        console.log(behaviour, character);\r\n    }\r\n    Bot.prototype.run = function (board) {\r\n        // Calculates risks if bot has defensive or combined behaviour.\r\n        var highestRisks = [];\r\n        var highestRisk = -1;\r\n        if (this.BEHAVIOUR === Behaviour.DEFENSIVE || this.BEHAVIOUR === Behaviour.COMBINED) {\r\n            var risks = this.getValues(board, this.ENEMY_CHARACTER);\r\n            for (var x = 0; x < risks.length; x++) {\r\n                for (var y = 0; y < risks[0].length; y++) {\r\n                    var risk = risks[x][y];\r\n                    if (risk > highestRisk) {\r\n                        highestRisks = [];\r\n                        highestRisks.push({ x: x, y: y });\r\n                        highestRisk = risk;\r\n                    }\r\n                    else if (risk === highestRisk) {\r\n                        highestRisks.push({ x: x, y: y });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Calculates rewards if bot has defensive or combined behaviour.\r\n        var highestRewards = [];\r\n        var highestReward = -1;\r\n        if (this.BEHAVIOUR === Behaviour.OFFENSIVE || this.BEHAVIOUR === Behaviour.COMBINED) {\r\n            var rewards = this.getValues(board, this.CHARACTER, true);\r\n            for (var x = 0; x < rewards.length; x++) {\r\n                for (var y = 0; y < rewards[0].length; y++) {\r\n                    var reward = rewards[x][y];\r\n                    if (reward > highestReward) {\r\n                        highestRewards = [];\r\n                        highestRewards.push({ x: x, y: y });\r\n                        highestReward = reward;\r\n                    }\r\n                    else if (reward === highestReward) {\r\n                        highestRewards.push({ x: x, y: y });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (highestRisk >= highestReward) {\r\n            var random = _utils_MathUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRandomInt(0, highestRisks.length - 1);\r\n            return highestRisks[random];\r\n        }\r\n        else if (highestRisk < highestReward) {\r\n            var random = _utils_MathUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRandomInt(0, highestRewards.length - 1);\r\n            return highestRewards[random];\r\n        }\r\n    };\r\n    Bot.prototype.getValues = function (board, character, noSurroundings) {\r\n        if (noSurroundings === void 0) { noSurroundings = false; }\r\n        var risks = [];\r\n        for (var x = 0; x < board.length; x++) {\r\n            var riskRow = [];\r\n            for (var y = 0; y < board[0].length; y++) {\r\n                if (board[x][y] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS || board[x][y] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE\r\n                    || (!this.hasEnemyNeighbours(board, { x: x, y: y }) && !noSurroundings)) {\r\n                    riskRow.push(0);\r\n                    continue;\r\n                }\r\n                var risk = 0;\r\n                risk += this.getTopRisk(board, character, { x: x, y: y });\r\n                risk += this.getTopRightRisk(board, character, { x: x, y: y });\r\n                risk += this.getRightRisk(board, character, { x: x, y: y });\r\n                risk += this.getBotRightRisk(board, character, { x: x, y: y });\r\n                risk += this.getBotRisk(board, character, { x: x, y: y });\r\n                risk += this.getBotLeftRisk(board, character, { x: x, y: y });\r\n                risk += this.getLeftRisk(board, character, { x: x, y: y });\r\n                risk += this.getTopLeftRisk(board, character, { x: x, y: y });\r\n                riskRow.push(risk);\r\n            }\r\n            risks.push(riskRow);\r\n        }\r\n        return risks;\r\n    };\r\n    Bot.prototype.hasEnemyNeighbours = function (board, position) {\r\n        var x = position.x, y = position.y;\r\n        if (board[x] && board[x][y - 1] && (board[x][y - 1] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x + 1] && board[x + 1] && board[x + 1][y - 1] && (board[x + 1][y - 1] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x + 1] && board[x + 1] && board[x + 1][y] && (board[x + 1][y] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x + 1] && board[x + 1] && board[x + 1][y + 1] && (board[x + 1][y + 1] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x] && board[x][y + 1] && (board[x][y + 1] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x - 1] && board[x - 1] && board[x - 1][y - 1] && (board[x - 1][y - 1] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x - 1] && board[x - 1][y] && (board[x - 1][y] === this.ENEMY_CHARACTER))\r\n            return true;\r\n        if (board[x - 1] && board[x - 1][y + 1] && (board[x - 1][y + 1] === this.ENEMY_CHARACTER))\r\n            return true;\r\n    };\r\n    Bot.prototype.getTopRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x] && board[x][y - 1] && board[x][y - 1] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x] && board[x][y - 2] && board[x][y - 2] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x] && board[x][y - 3] && board[x][y - 3] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x] && board[x][y - 4] && board[x][y - 4] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getTopRightRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x + 1] && board[x + 1][y - 1] && board[x + 1][y - 1] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x + 2] && board[x + 2][y - 2] && board[x + 2][y - 2] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x + 3] && board[x + 3][y - 3] && board[x + 3][y - 3] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x + 4] && board[x + 4][y - 4] && board[x + 4][y - 4] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getRightRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x + 1] && board[x + 1][y] && board[x + 1][y] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x + 2] && board[x + 2][y] && board[x + 2][y] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x + 3] && board[x + 3][y] && board[x + 3][y] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x + 4] && board[x + 4][y] && board[x + 4][y] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getBotRightRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x + 1] && board[x + 1][y + 1] && board[x + 1][y + 1] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x + 2] && board[x + 2][y + 2] && board[x + 2][y + 2] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x + 3] && board[x + 3][y + 3] && board[x + 3][y + 3] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x + 4] && board[x + 4][y + 4] && board[x + 4][y + 4] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getBotRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x] && board[x][y + 1] && board[x][y + 1] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x] && board[x][y + 2] && board[x][y + 2] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x] && board[x][y + 3] && board[x][y + 3] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x] && board[x][y + 4] && board[x][y + 4] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getBotLeftRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x - 1] && board[x - 1][y - 1] && board[x - 1][y - 1] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x - 2] && board[x - 2][y - 2] && board[x - 2][y - 2] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x - 3] && board[x - 3][y - 3] && board[x - 3][y - 3] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x - 4] && board[x - 4][y - 4] && board[x - 4][y - 4] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getLeftRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x - 1] && board[x - 1][y] && board[x - 1][y] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x - 2] && board[x - 2][y] && board[x - 2][y] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x - 3] && board[x - 3][y] && board[x - 3][y] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x - 4] && board[x - 4][y] && board[x - 4][y] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    Bot.prototype.getTopLeftRisk = function (board, character, position) {\r\n        var x = position.x, y = position.y;\r\n        var risk = 0;\r\n        if (board[x - 1] && board[x - 1][y + 1] && board[x - 1][y + 1] === character) {\r\n            risk += this.INCREASE;\r\n            if (board[x - 2] && board[x - 2][y + 2] && board[x - 2][y + 2] === character) {\r\n                risk += this.INCREASE * 2;\r\n                if (board[x - 3] && board[x - 3][y + 3] && board[x - 3][y + 3] === character) {\r\n                    risk += this.INCREASE * 3;\r\n                    if (board[x - 4] && board[x - 4][y + 4] && board[x - 4][y + 4] === character)\r\n                        risk += this.INCREASE * 4;\r\n                }\r\n            }\r\n        }\r\n        return risk;\r\n    };\r\n    return Bot;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://piskvorky/./src/bot.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _FiveInARow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FiveInARow */ \"./src/FiveInARow.ts\");\n\r\n// Start game\r\n_FiveInARow__WEBPACK_IMPORTED_MODULE_0__[\"default\"].main();\r\n\n\n//# sourceURL=webpack://piskvorky/./src/index.ts?");

/***/ }),

/***/ "./src/models/EventEmitter.ts":
/*!************************************!*\
  !*** ./src/models/EventEmitter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar EventEmitter = /** @class */ (function () {\r\n    function EventEmitter() {\r\n        this.events = {};\r\n    }\r\n    EventEmitter.prototype.on = function (eventName, callback) {\r\n        if (this.events[eventName]) {\r\n            this.events[eventName].push(callback);\r\n        }\r\n        else {\r\n            this.events[eventName] = [callback];\r\n        }\r\n    };\r\n    EventEmitter.prototype.trigger = function (eventName) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (this.events[eventName]) {\r\n            this.events[eventName].forEach(function (cb) { return cb.apply(null, args); });\r\n        }\r\n    };\r\n    return EventEmitter;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventEmitter);\r\n\n\n//# sourceURL=webpack://piskvorky/./src/models/EventEmitter.ts?");

/***/ }),

/***/ "./src/models/Playground.ts":
/*!**********************************!*\
  !*** ./src/models/Playground.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FieldValue\": () => (/* binding */ FieldValue),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_WinUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/WinUtils */ \"./src/utils/WinUtils.ts\");\n/* harmony import */ var _FiveInARow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../FiveInARow */ \"./src/FiveInARow.ts\");\n\r\n\r\nvar FieldValue;\r\n(function (FieldValue) {\r\n    FieldValue[FieldValue[\"EMPTY\"] = 0] = \"EMPTY\";\r\n    FieldValue[FieldValue[\"CIRCLE\"] = 1] = \"CIRCLE\";\r\n    FieldValue[FieldValue[\"CROSS\"] = 2] = \"CROSS\";\r\n})(FieldValue || (FieldValue = {}));\r\nvar Playground = /** @class */ (function () {\r\n    function Playground() {\r\n        var _this = this;\r\n        // HTML classes\r\n        this.ROW_CLASS = 'row';\r\n        this.FIELD_CLASS = 'field';\r\n        this.CIRCLE = document.getElementById(\"circle\");\r\n        this.CROSS = document.getElementById(\"cross\");\r\n        /**\r\n         * Number of rows on the board.\r\n         */\r\n        this.ROWS = 18;\r\n        /**\r\n         * Number of columns on the board.\r\n         */\r\n        this.COLUMNS = 18;\r\n        /**\r\n         * 2-dimensional array representing the game board.\r\n         */\r\n        this.board = [];\r\n        /**\r\n         * Flag if game is currently running.\r\n         */\r\n        this.isRunning = false;\r\n        /**\r\n         * Number of current move.\r\n         */\r\n        this.counter = 1;\r\n        this.clearPlayground();\r\n        this.generatePlayground();\r\n        _FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eventEmitter.on('switchPlayers', function () { return _this.botTurn(); });\r\n    }\r\n    Object.defineProperty(Playground.prototype, \"nextPlayer\", {\r\n        get: function () {\r\n            return this.counter % 2 ? FieldValue.CIRCLE : FieldValue.CROSS;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Playground.prototype, \"running\", {\r\n        set: function (value) {\r\n            if (this.isRunning !== value) {\r\n                this.isRunning = value;\r\n                if (this.isRunning)\r\n                    this.botTurn();\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Resets the playground for new game.\r\n     */\r\n    Playground.prototype.reset = function () {\r\n        this.isRunning = true;\r\n        this.clearPlayground();\r\n        this.generatePlayground();\r\n        _FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eventEmitter.trigger('switchPlayers', this.nextPlayer);\r\n    };\r\n    /**\r\n     * Regenerates the playground.\r\n     */\r\n    Playground.prototype.regenerate = function () {\r\n        this.clearPlayground();\r\n        this.generatePlayground();\r\n    };\r\n    /**\r\n     * Generates cleared board 2-dimensional array.\r\n     */\r\n    Playground.prototype.clearPlayground = function () {\r\n        for (var i = 0; i < this.ROWS; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < this.COLUMNS; j++) {\r\n                row[j] = FieldValue.EMPTY;\r\n            }\r\n            this.board[i] = row;\r\n        }\r\n    };\r\n    /**\r\n     * Generates playgrounds' HTML code.\r\n     */\r\n    Playground.prototype.generatePlayground = function () {\r\n        var playground = document.createElement('div');\r\n        for (var i = 0; i < this.ROWS; i++) {\r\n            var row = this.createRow();\r\n            for (var j = 0; j < this.COLUMNS; j++) {\r\n                row.append(this.createField(this.board[i][j], \"\".concat(i, \"x\").concat(j)));\r\n            }\r\n            playground.append(row);\r\n        }\r\n        _FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eventEmitter.trigger('playgroundChange', playground);\r\n    };\r\n    /**\r\n     * Creates single row.\r\n     */\r\n    Playground.prototype.createRow = function () {\r\n        var row = document.createElement('div');\r\n        row.classList.add(this.ROW_CLASS);\r\n        return row;\r\n    };\r\n    /**\r\n     * Creates single field.\r\n     *\r\n     * @param value Fields value.\r\n     * @param id Fields id.\r\n     */\r\n    Playground.prototype.createField = function (value, id) {\r\n        var _this = this;\r\n        var field = document.createElement('div');\r\n        field.classList.add(this.FIELD_CLASS);\r\n        field.setAttribute('id', id);\r\n        if (value !== FieldValue.EMPTY) {\r\n            field.append(value === FieldValue.CIRCLE ? this.CIRCLE.cloneNode(true) : this.CROSS.cloneNode(true));\r\n            field.classList.add(Playground.getFieldValueClass(value));\r\n        }\r\n        field.addEventListener('click', function (e) { return _this.handleClick(e); });\r\n        return field;\r\n    };\r\n    Playground.prototype.makeMove = function (position) {\r\n        var _this = this;\r\n        this.board[position.x][position.y] = this.nextPlayer;\r\n        this.generatePlayground();\r\n        this.counter++;\r\n        var win = _utils_WinUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].checkForWin(this.ROWS, this.COLUMNS, this.board);\r\n        if (win) {\r\n            _FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eventEmitter.trigger('win', this.nextPlayer);\r\n        }\r\n        else {\r\n            setTimeout(function () { return _FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].eventEmitter.trigger('switchPlayers', _this.nextPlayer); });\r\n        }\r\n    };\r\n    /**\r\n     * Is bot on turn?\r\n     */\r\n    Playground.prototype.botTurn = function () {\r\n        if (_FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mode === \"multiplayer\") {\r\n            return;\r\n        }\r\n        if (this.nextPlayer === FieldValue.CIRCLE) {\r\n            var position = _FiveInARow__WEBPACK_IMPORTED_MODULE_1__[\"default\"].bot.run(this.board);\r\n            this.makeMove(position);\r\n        }\r\n    };\r\n    /**\r\n     * Handles users' input.\r\n     *\r\n     * @param event Pointer event.\r\n     */\r\n    Playground.prototype.handleClick = function (event) {\r\n        if (!this.isRunning) {\r\n            return;\r\n        }\r\n        var target = event.target;\r\n        var split = target.getAttribute(\"id\").split(\"x\"); // Current field (fe. 3x8)\r\n        var row = parseInt(split[0]); // From split array x coordinate\r\n        var column = parseInt(split[1]); // From split array y coordinate\r\n        if (this.board[row][column] !== FieldValue.EMPTY) { // Break if field is occupied\r\n            return;\r\n        }\r\n        this.makeMove({ x: row, y: column });\r\n    };\r\n    /**\r\n     * Returns html class of specified field value.\r\n     *\r\n     * @param value Field value.\r\n     */\r\n    Playground.getFieldValueClass = function (value) {\r\n        switch (value) {\r\n            case FieldValue.CIRCLE:\r\n                return 'circle';\r\n            case FieldValue.CROSS:\r\n                return 'cross';\r\n            case FieldValue.EMPTY:\r\n                return null;\r\n        }\r\n    };\r\n    return Playground;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Playground);\r\n\n\n//# sourceURL=webpack://piskvorky/./src/models/Playground.ts?");

/***/ }),

/***/ "./src/utils/MathUtils.ts":
/*!********************************!*\
  !*** ./src/utils/MathUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar MathUtils = /** @class */ (function () {\r\n    function MathUtils() {\r\n    }\r\n    /**\r\n     * Returns a random integer between min (inclusive) and max (inclusive).\r\n     * The value is no lower than min (or the next integer greater than min\r\n     * if min isn't an integer) and no greater than max (or the next integer\r\n     * lower than max if max isn't an integer).\r\n     * Using Math.round() will give you a non-uniform distribution!\r\n     */\r\n    MathUtils.getRandomInt = function (min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.ceil(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n    return MathUtils;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MathUtils);\r\n\n\n//# sourceURL=webpack://piskvorky/./src/utils/MathUtils.ts?");

/***/ }),

/***/ "./src/utils/WinUtils.ts":
/*!*******************************!*\
  !*** ./src/utils/WinUtils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _models_Playground__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Playground */ \"./src/models/Playground.ts\");\n\r\nvar WinUtils = /** @class */ (function () {\r\n    function WinUtils() {\r\n    }\r\n    /**\r\n     * Checks if some player has won.\r\n     *\r\n     * @param x1 number of rows\r\n     * @param x2 number of columns\r\n     * @param board 2-dimensional board array.\r\n     * @returns `true` if someone has won.\r\n     */\r\n    WinUtils.checkForWin = function (x1, x2, board) {\r\n        return this.checkEdges(x1, x2, board) || this.checkDiagonals(x1, x2, board);\r\n    };\r\n    /**\r\n     * Checks if some player has won in rows or columns.\r\n     *\r\n     * @param x1 number of rows\r\n     * @param x2 number of columns\r\n     * @param board 2-dimensional board array.\r\n     * @returns `true` if someone has won.\r\n     */\r\n    WinUtils.checkEdges = function (x1, x2, board) {\r\n        for (var i = 0; i < x1; i++) {\r\n            var rowSequence = { object: _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.EMPTY, length: 0 };\r\n            var columnSequence = { object: _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.EMPTY, length: 0 };\r\n            for (var j = 0; j < x2; j++) {\r\n                // Check for win in rows\r\n                if (board[i][j] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE)\r\n                    this.increaseCircle(rowSequence);\r\n                else if (board[i][j] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS)\r\n                    this.increaseCross(rowSequence);\r\n                else\r\n                    this.reset(rowSequence);\r\n                // Check for win in columns\r\n                if (board[j][i] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE)\r\n                    this.increaseCircle(columnSequence);\r\n                else if (board[j][i] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS)\r\n                    this.increaseCross(columnSequence);\r\n                else\r\n                    this.reset(columnSequence);\r\n                if (rowSequence.length >= this.WIN_AMOUNT || columnSequence.length >= this.WIN_AMOUNT) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Checks if some player has won in diagonals.\r\n     *\r\n     * @param x1 number of rows\r\n     * @param x2 number of columns\r\n     * @param board 2-dimensional board array.\r\n     * @returns `true` if someone has won.\r\n     */\r\n    WinUtils.checkDiagonals = function (x1, x2, board) {\r\n        for (var i = 0; i < x1 + x2; i++) {\r\n            var xySequence = { object: _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.EMPTY, length: 0 };\r\n            var yxSequence = { object: _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.EMPTY, length: 0 };\r\n            var xyPosition = { row: i < x1 ? 0 : i - x1 + 1, col: i < x2 ? i : x2 - 1 };\r\n            var yxPosition = { row: i < x1 ? 17 : 2 * x1 - i - 2, col: i < x2 ? i : x2 - 1 };\r\n            for (var j = 0; (i < x1 && j < i + 1) || (i >= x1 && j < 2 * x1 - i - 1); j++) {\r\n                // Check for win in xy diagonals\r\n                if (board[xyPosition.row][xyPosition.col] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE)\r\n                    this.increaseCircle(xySequence);\r\n                else if (board[xyPosition.row][xyPosition.col] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS)\r\n                    this.increaseCross(xySequence);\r\n                else\r\n                    this.reset(xySequence);\r\n                // Check for win in yx diagonals\r\n                if (board[yxPosition.row][yxPosition.col] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE)\r\n                    this.increaseCircle(yxSequence);\r\n                else if (board[yxPosition.row][yxPosition.col] === _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS)\r\n                    this.increaseCross(yxSequence);\r\n                else\r\n                    this.reset(yxSequence);\r\n                if (xySequence.length >= this.WIN_AMOUNT || yxSequence.length >= this.WIN_AMOUNT) {\r\n                    return true;\r\n                }\r\n                xyPosition.row++;\r\n                xyPosition.col--;\r\n                yxPosition.row--;\r\n                yxPosition.col--;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Increases circles length in sequence\r\n     * @param sequence current sequence\r\n     */\r\n    WinUtils.increaseCircle = function (sequence) {\r\n        if (sequence.object !== _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE)\r\n            sequence.length = 0;\r\n        sequence.object = _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CIRCLE;\r\n        sequence.length++;\r\n    };\r\n    /**\r\n     * Increases circles length in sequence\r\n     * @param sequence current sequence\r\n     */\r\n    WinUtils.increaseCross = function (sequence) {\r\n        if (sequence.object !== _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS)\r\n            sequence.length = 0;\r\n        sequence.object = _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.CROSS;\r\n        sequence.length++;\r\n    };\r\n    /**\r\n     * Resets the sequence.\r\n     * @param sequence current sequence\r\n     */\r\n    WinUtils.reset = function (sequence) {\r\n        sequence.object = _models_Playground__WEBPACK_IMPORTED_MODULE_0__.FieldValue.EMPTY;\r\n        sequence.length = 0;\r\n    };\r\n    WinUtils.WIN_AMOUNT = 5;\r\n    return WinUtils;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WinUtils);\r\n\n\n//# sourceURL=webpack://piskvorky/./src/utils/WinUtils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;